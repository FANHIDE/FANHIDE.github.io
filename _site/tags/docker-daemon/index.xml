<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker daemon on Yunfan Zhang</title>
    <link>https://fanhide.github.io/tags/docker-daemon/</link>
    <description>Recent content in Docker daemon on Yunfan Zhang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 17 Aug 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://fanhide.github.io/tags/docker-daemon/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>docker源码分析</title>
      <link>https://fanhide.github.io/blog/docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://fanhide.github.io/blog/docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>docker cli 数据结构 // DockerCli结构 type DockerCli struct { proto string	// (Client和Server直接的传输类型)协议类型 tcp、unix、fd addr string	// Docker需要访问host的目标 configFile *registry.ConfigFile // for what ? in io.ReadCloser	// 读和关闭接口 out io.Writer // 写接口 err io.Writer	// 错误输出接口 isTerminal bool	// 终端相关？ terminalFd uintptr	// 文件句柄 tlsConfig *tls.Config	// tls配置 scheme string	// 指示http或者https }  结构体包含的方法 // 创建DockerCli对象。(工厂模式) func NewDockerCli(in io.ReadCloser, out, err io.Writer, proto, addr string, tlsConfig *tls.Config) *DockerCli { var ( isTerminal = false terminalFd uintptr scheme = &amp;quot;http&amp;quot; ) // 如果有tls配置那么使用https协议。 if tlsConfig !</description>
    </item>
    
  </channel>
</rss>